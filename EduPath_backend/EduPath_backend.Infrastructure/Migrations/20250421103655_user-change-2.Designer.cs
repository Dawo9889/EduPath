// <auto-generated />
using System;
using EduPath_backend.Infrastructure.Persistance;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EduPath_backend.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250421103655_user-change-2")]
    partial class userchange2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EduPath_backend.Domain.Entities.Assignment", b =>
                {
                    b.Property<Guid>("Id_Assignment")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date_end")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date_start")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Id_Course")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Visible")
                        .HasColumnType("bit");

                    b.HasKey("Id_Assignment");

                    b.HasIndex("Id_Course");

                    b.ToTable("Assignments");
                });

            modelBuilder.Entity("EduPath_backend.Domain.Entities.AssignmentUser", b =>
                {
                    b.Property<Guid>("Id_Course")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Id_User")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date_submitted")
                        .HasColumnType("datetime2");

                    b.Property<string>("Filepath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id_Course", "Id_User");

                    b.HasIndex("Id_User");

                    b.ToTable("AssignmentUsers");
                });

            modelBuilder.Entity("EduPath_backend.Domain.Entities.Course", b =>
                {
                    b.Property<Guid>("Id_Course")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id_Course");

                    b.ToTable("Courses");

                    b.HasData(
                        new
                        {
                            Id_Course = new Guid("11111111-1111-1111-1111-111111111111"),
                            Description = "Learn the basics of programming using C#.",
                            IsPublic = false,
                            Name = "Introduction to Programming"
                        },
                        new
                        {
                            Id_Course = new Guid("11111111-1111-1111-1111-111111111112"),
                            Description = "Explore advanced topics in database design and optimization.",
                            IsPublic = false,
                            Name = "Advanced Database Systems"
                        },
                        new
                        {
                            Id_Course = new Guid("11111111-1111-1111-1111-111111111113"),
                            Description = "Build modern web applications using ASP.NET Core.",
                            IsPublic = false,
                            Name = "Web Development with ASP.NET"
                        });
                });

            modelBuilder.Entity("EduPath_backend.Domain.Entities.CourseUser", b =>
                {
                    b.Property<Guid>("Id_Course")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Id_User")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id_Course", "Id_User");

                    b.HasIndex("Id_User");

                    b.ToTable("CourseUsers");
                });

            modelBuilder.Entity("EduPath_backend.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id_User")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("ProfilePicture")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RefreshTokenExpiryTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.HasKey("Id_User");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id_User = new Guid("22222222-2222-2222-2222-222222222221"),
                            FirstName = "Dawid",
                            LastName = "Dawidowski",
                            RefreshTokenExpiryTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Role = 0
                        },
                        new
                        {
                            Id_User = new Guid("22222222-2222-2222-2222-222222222222"),
                            FirstName = "Szymon",
                            LastName = "Szymonowski",
                            RefreshTokenExpiryTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Role = 1
                        },
                        new
                        {
                            Id_User = new Guid("22222222-2222-2222-2222-222222222223"),
                            FirstName = "Andrzej",
                            LastName = "Waszut",
                            RefreshTokenExpiryTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Role = 2
                        });
                });

            modelBuilder.Entity("EduPath_backend.Domain.Entities.Assignment", b =>
                {
                    b.HasOne("EduPath_backend.Domain.Entities.Course", "Course")
                        .WithMany("Assignments")
                        .HasForeignKey("Id_Course")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("EduPath_backend.Domain.Entities.AssignmentUser", b =>
                {
                    b.HasOne("EduPath_backend.Domain.Entities.Course", "Course")
                        .WithMany()
                        .HasForeignKey("Id_Course")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EduPath_backend.Domain.Entities.User", "User")
                        .WithMany("AssignmentUsers")
                        .HasForeignKey("Id_User")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EduPath_backend.Domain.Entities.CourseUser", b =>
                {
                    b.HasOne("EduPath_backend.Domain.Entities.Course", "Course")
                        .WithMany("CourseUsers")
                        .HasForeignKey("Id_Course")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EduPath_backend.Domain.Entities.User", "User")
                        .WithMany("CourseUsers")
                        .HasForeignKey("Id_User")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EduPath_backend.Domain.Entities.Course", b =>
                {
                    b.Navigation("Assignments");

                    b.Navigation("CourseUsers");
                });

            modelBuilder.Entity("EduPath_backend.Domain.Entities.User", b =>
                {
                    b.Navigation("AssignmentUsers");

                    b.Navigation("CourseUsers");
                });
#pragma warning restore 612, 618
        }
    }
}
